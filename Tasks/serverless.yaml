service: project-appeals-dms
frameworkVersion: "3" package:
individually: true patterns:
- 'Inode_modules/***
custom:
pythonRequirements:
pythonBin: python3
dockerizePip: non-linux
security_group_id:
prod: sg-0e7ba9806d8583cd4
prodtest: sg-072002d8f775b3de6
uat: sg-046068a4a5a4860e1
subnet _id1:
prod: subnet-0885860eba5221fb3 prodtest: subnet-09833dac914bba07c
uat: subnet-0771581e88e3b57c7
subnet_id2:
prod: subnet-0fcce4b6f08421e6d
prodtest: subnet-00fad31a15c521e59
uat: subnet-0f443c98b0ee0752c
credstash_layer:
prodtest: "3"
uat: "1"
prod: "3"
psycopg2_layer:
prodtest: "1"
uat: "1" prod: "1"
log retention_in _days:
prod: 14
uat: 5
prodtest: 5
role:
prod: "arn:aws-us-gov: iam: :065443159001:role/project/project-appeals-prod-lambda-dms" prodtest: "arn:aws-us-gov: iam:: 065443159001:role/project/project-appeals-prod-lambda-dms" uat: "arn:aws-us-gov: iam: :065403089830:role/project/project-appeals-dev-lambda-dms"
dms_caseflow:
restart:
prod:
dmsTaskName: prod-caseflow-redshift-onetime cron: cron (06 **?*)
state: ENABLED
prodtest:
dmsTaskName: prodtest-caseflow-redshift-full-load
cron: cron (30 1 * * ?*)
state: ENABLED
uat:
dmsTaskName: TODO
cron: cron(0 0 * *?*)
state: DISABLED
check:
prod:
amsTaskName: prod-caseflow-redshift-onetime state: ENABLED
prodtest:
dmsTaskName: prodtest-caseflow-redshift-full-load state: ENABLED
uat:
dmsTaskName: TODO
state: DISABLED
dms_ods:
restart:
prod:
dmsTaskName: prod-ods-redshift-onetime
cron: cron (30 2 * *?*)
state: ENABLED
prodtest:
dmsTaskName: TODO
cron: cron (302 * *?*)
state: DISABLED
uat:
dmsTaskName: TODO
cron: cron (302 **? *) state: DISABLED
check:
prod:
dmsTaskName: prod-ods-redshift-onetime state: ENABLED
prodtest:
dmsTaskName: TODO
state: DISABLED
uat:
dmsTaskName: TODO
state: DISABLED
dms_vacols:
restart:
prod:
dmsTaskName: prod-vacols-redshift-onetime cron: cron(07 * *?*)
state: ENABLED
prodtest:
dmsTaskName: prodtest-vacols-redshift-full-load cron: cron (06 **?*)
state: ENABLED
uat:
dmsTaskName: TODO
cron: cron(0 0 **?*)
state: DISABLED
check: prod:
dmsTaskName: prod-vacols-redshift-onetime state: ENABLED
prodtest:
dmsTaskName: prodtest-vacols-redshift-full-load state: ENABLED
uat:
dmsTaskName: TODO
state: DISABLED
dms_refresh_vacols:
restart:
prod:
dmsTaskName: vacols-prod-dr-to-vacols-prodtest
cron: cron (0 6 **?*)
state: ENABLED
prodtest:
dmsTaskName: TODO
cron: cron (0 6 **?*)
state: DISABLED
uat:
dmsTaskName: TODO
cron: cron(0 0 * *?*)
state: DISABLED
check:
prod:
dmsTaskName: vacols-prod-dr-to-vacols-prodtest state: ENABLED
prodtest:
dmsTaskName: TODO
state: DISABLED
uat:
dmsTaskName: TODO
state: DISABLED
dms_onprem_vacols:
restart:
prod:
dmsTaskName: appeals-vacols-prod-onprem-dms-task
cron: cron(0 4 * *?*)
state: ENABLED
prodtest:
dmsTaskName: TODO
cron: cron (04 * *?*)
state: DISABLED
uat:
dmsTaskName: TODO
cron: cron(0 0 **?*)
state: DISABLED
check:
prod:
dmsTaskName: appeals-vacols-prod-onprem-dms-task state: ENABLED
prodtest:
dmsTaskName: TODO
state: DISABLED
uat:
dmsTaskName: TODO
state: DISABLED
dms _data_platform_vacols:
restart:
prod:
dmsTaskName: data-platform-vacols-redshift cron: cron(08 * *?*)
state: ENABLED
prodtest:
dmsTaskName: TODO
cron: cron(0 6 **?*)
state: DISABLED
uat:
dmsTaskName: TODO
cron: cron(0 0 * *?*)
state: DISABLED
check:
prod:
dmsTaskName: data-platform-vacols-redshift state: ENABLED
prodtest:
dmsTaskName: TODO
state: DISABLED
uat:
dmsTaskName: TODO
state: DISABLED
dms_data_platform_caseflow:
restart:
prod:
dmsTaskName: data-platform-caseflow-redshift cron: cron(02 * *?*)
state: ENABLED
prodtest:
dmsTaskName: TODO
cron: cron(0 6 **?*)
state: DISABLED
uat:
dmsTaskName: TODO
cron: cron(0 0 * *?*)
state: DISABLED
check:
prod:
dmsTaskName: data-platform-caseflow-redshift state: ENABLED
dmsTaskName: TODO
state: DISABLED
uat:
dmsTaskName: TODO
state: DISABLED
ams_devprod
_vacols:
restart:
prod:
dmsTaskName: prod-vacols-devprod-redshift cron: cron(0 6 **?*)
state: ENABLED
prodtest:
dmsTaskName: TODO
cron: cron(0 6 **?*)
state: DISABLED
uat:
dmsTaskName: TODO
cron: cron(0 0 * *?*)
state: DISABLED
check:
prod:
dmsTaskName: prod-vacols-devprod-redshift state: ENABLED
prodtest:
dmsTaskName: TODO
state: DISABLED
uat:
dmsTaskName: TODO
state: DISABLED
dms_devprod.
_caseflow:
restart:
prod:
dmsTaskName: prod-caseflow-devprod-redshift cron: cron (30 1 * * ?*)
state: ENABLED
prodtest:
dmsTaskName: TODO
cron: cron(06 * *?*)
state: DISABLED
uat:
dmsTaskName: TODO
cron: cron(0 0 **?*)
state: DISABLED
check:
prod:
dmsTaskName: prod-caseflow-devprod-redshift state: ENABLED
prodtest:
dmsTaskName: TODO
state: DISABLED
uat:
dmsTaskName: TODO
state: DISABLED
dms_mv_refresh:
restart:
prod:
dmsTaskName: prod-mv-caseflow-redshift 
cron: cron(07 * *?*)
state: ENABLED
prodtest:
dmsTaskName: TODO
cron: cron(06 * *?*)
state: DISABLED
uat:
dmsTaskName: TODO
cron: cron(0 0**?*)
state: DISABLED
check:
prod:
dmsTaskName: prod-mv-caseflow-redshift state: ENABLED
prodtest:
dmsTaskName: TODO
state: DISABLED
uat:
dmsTaskName: TODO
state: DISABLED
cloudWatchLogsTags: #{file(../serverless.common.yml):cloudWatchLogsTags}
provider:
name: aws
runtime: python3.8
stage: ${opt:stage, 'uat'} region: us-gov-west-1
memorySize: 128
logRetentionInDays: ${self:custom.log_retention_in_days.${self:provider.stage}}
Iam:
role: ${self:custom.role.${self:provider.stage}}
environment:
DEPLOY _ENV: #{opt:stage, 'uat'}
POWERTOOLS_SERVICE_NAME: #{self:service} stackTags: ${file(../serverless.common.yml):defaultTags}
functions:
restart:
description: Restart Redshift DMS task to resresh data handler: dms.dms_restart
timeout: 900
vpc:
securityGroupIds :
- ﻿﻿${self:custom.security_group_id.${self:provider.stage}} subnetIds:
- ﻿﻿${self:custom.subnet_id1.${self:provider.stage}}
- ﻿﻿${self:custom.subnet_id2.${self:provider.stage}}
layers:
- ﻿﻿Fn:: Sub: arn:aws-us-gov: lambda:${self:provider.region}:#{AWS::AccountId}:layer:credstashLayer:#{self:custom.credstash_layer.${opt:stage}}
- ﻿﻿Fn:: Sub: arn:aws-us-gov:lambda:#{self:provider.region}:${AWS::AccountId}:layer:psycopg2Layer:${self:custom.psycopg2_layer.${opt:stage}}
check:
description: Check the Status of the DMS Tasks handler: dms.dms_status_check
timeout: 60
layers:
- ﻿﻿Fn:: Sub: arn:aws-us-gov: lambda:${self:provider.region}:${AWS::AccountId}:layer:credstashLayer:#{self:custom.credstash_layer.${opt:stage}}
- ﻿﻿Fn:: Sub: arn:aws-us-gov: lambda:${self:provider.region}:${AWS::AccountId}:layer:psycopg2Layer:#{self:custom.psycopg2_layer.${opt:stage}}
environment:
DdFetchLambdaTags: true
kill_connections:
description: Kill active db connections before attempting data refresh handler: dms.kill_connections
timeout: 900
vpc:
securityGroupIds:
- ﻿﻿${self:custom.security_group_id.${self:provider.stage}}  subnetIds:
- ﻿﻿${self:custom.subnet_id1.${self:provider.stage}}
- ﻿﻿#{self:custom.subnet_id2.${self:provider.stage}}
layers:
- ﻿﻿Fn:: Sub: arn:aws-us-gov: lambda:${self:provider.region}:${AWS::AccountId}:layer:credstashLayer:${self:custom.credstash_layer.${opt:stage}}
- Fn:: Sub: arn:aws-us-gov: lambda:${self:provider.region}:#{AWS::AccountId}:layer:psycopg2Layer:#{self:custom.psycopg2_layer.${opt:stage}}
events:
- schedule:
rate: cron (50 3 **? *)
enabled: true

# recovery:
#description: A wrapper for dms restart to handle apigateway requests
# handler: dms.recovery
# timeout: 900
#vpc:
#securityGroupIds:
#- ${self:custom.security_group_id.${self:provider.stage}} 
#subnetIds:
# -${self:custom.subnet_id1.${self:provider.stage}}
# -${self:custom.subnet_id2.${self:provider.stage}}
#layers:
# -Fn:: Sub: arn:aws-us-gov:lambda:#{self:provider.region}:${AWS::AccountId}:layer:credstashLayer:${self:custom.credstash_layer.${opt:stage}}
# -Fn:: Sub: arn:aws-us-gov: lambda:#{self:provider.region}:${AWS::AccountId}:layer:psycopg2Layer:${self:custom.psycopg2_layer.${opt:stage}}
resources:
Resources:
# Lambda Permissions for Restart function
RestartLambdaResourcePolicy:
Type: 'AWS:: Lambda: :Permission'
Properties:
FunctionName:
Fn: :GetAtt: [RestartLambdaFunction, Arn]
Action: "lambda:InvokeFunction'
Principal: 'events.amazonaws.com'
SourceArn:
Fn:: Sub: 'arn:aws-us-gov:events:${AWS: :Region}:${AWS: :AccountId}:rule/**
# Lambda Permissions for Check function
CheckLambdaResourcePolicy:
Type: 'AWS:: Lambda: :Permission'
Properties:
FunctionName:
Fn: :GetAtt: [CheckLambdaFunction, Arn]
Action: 'lambda: InvokeFunction'
Principal: 'events.amazonaws.com'
SourceArn:
En:: Sub: 'arn:aws-us-gov:events:${AWS:: Region}:${AWS: :AccountId}:rule/**
# EventBridge Rules for Restart function
dmsCaseflowRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Caseflow DB to Caseflow Redshift' Name: dms_caseflow_restart_${self:provider.stage}
ScheduleExpression: ${self:custom.dms_caseflow.restart.${self:provider.stage}.cron} state: ${self:custom.dms_caseflow.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartSchedule'
Input: '{"dms_task": "${self:custom.dms_caseflow.restart.${self:provider.stage}.dmsTaskName}"}'
dmsOdsRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from ETL DB to Caseflow Redshift' Name: dms_ods_restart_${self:provider.stage}
ScheduleExpression: ${self:custom.dms_ods.restart.${self:provider.stage}.cron}
State: #{self:custom.dms_ods.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartSchedule'
Input: '{"dms_task": "${self:custom.dms_ods.restart.${self:provider.stage}.dmsTaskName}"}'
dmsVacolsRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Vacols DB to Caseflow Redshift'
Name: dms_vacols_restart_${self:provider.stage}
ScheduleExpression: ${self:custom.dms_vacols.restart.${self:provider.stage}.cron}
State: ${self:custom.dms_vacols.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartschedule'
Input: '{"dms_task": "${self:custom.dms_vacols.restart.${self:provider.stage}.dmsTaskName}"}'
dmsRefreshVacolsRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Vacols PROD DB to Vacols ProdTest DB'
Name: dms_refresh_vacols_restart_${self:provider.stage}
ScheduleExpression: ${self:custom.dms_refresh_vacols.restart.${self:provider.stage}.cron}
State: ${self:custom.dms_refresh_vacols.restart.${self:provider.stage}.state}
Targets:
- Arn :
Fn: :GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartschedule'
Input: '{"dms_task": "${self:custom.dms_refresh_vacols.restart.${self:provider.stage}.dmsTaskName}"}'
dmsOnPremVacolsRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Vacols Prod DB to Vacols On Prem DB'
Name: dms_onprem_vacols_restart_#{self:provider.stage}
ScheduleExpression: #{self:custom.dms_onprem_vacols.restart.${self:provider.stage}.cron}
State: #{self: custom.dms_onprem_vacols.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartSchedule'
Input: '{"dms_task": "#{self:custom.dms_onprem_vacols.restart.${self:provider.stage}.dmsTaskName}"}'
dmsDataPlatformVacolsRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Vacols Prod DB to ADP Redshift' Name: dms_data_platform_vacols_restart_${self:provider.stage}
ScheduleExpression: #{self:custom.dms_data_platform_vacols.restart.#{self:provider.stage}.cron}
State: #{self:custom.dms_data_platform_vacols.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartSchedule'
Input: '{"dms_task": "${self:custom.dms_data_platform_vacols.restart.${self:provider.stage}.dmsTaskName}"}'
dmsDataPlatformCaseflowRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Caseflow Prod DB to ADP Redshift' Name: dms_data_platform_caseflow_restart_${self:provider.stage}
ScheduleExpression: ${self:custom.dms_data_platform_caseflow.restart.${self:provider.stage}.cron}
State: #{self:custom.dms_data_platform_caseflow.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartschedule'
Input: '{"dms_task": "${self:custom.dms_data_platform_caseflow.restart.${self:provider.stage}.dmsTaskName}"}'
dmsDevProdVacolsRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Vacols Prod DB to ADP Devprod Redshift' Name: dms_devprod_vacols_restart_${self:provider.stage}
ScheduleExpression: #{self:custom.dms_devprod_vacols.restart.${self:provider.stage}.cron}
State: $(self:custom.dms_devprod_vacols.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartSchedule'
Input: '{"dms_task": "${self:custom.dms_devprod_
_vacols.restart.${self:provider.stage}.dmsTaskName}"}'
dmsDevProdCaseflowRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Caseflow Prod DB to ADP Devprod Redshift' Name: dms_devprod_caseflow_restart_#{self:provider.stage}
ScheduleExpression: #{self:custom.dms_devprod_caseflow.restart.${self:provider.stage}.cron}
State: ${self:custom.dms_devprod_caseflow.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartschedule'
Input: '("dms_task": "${self:custom.dms_devprod_caseflow.restart.$(self:provider.stage}dmsTaskName} "3*
dmsMVRefreshRestart:
Type: AWS:: Events:: Rule
Properties:
Description: 'DMS task from Caseflow Prod DB to Redshift to refresh Materialized View' Name: dms_mv_refresh_restart_${self:provider.stage}
ScheduleExpression: ${self:custom.dms_mv_refresh.restart.${self:provider.stage}.cron}
State: ${self:custom.dms_mv_refresh.restart.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [RestartLambdaFunction, Arn]
Id: 'restartSchedule'
Input: '{"dms_task": "${self:custom.dms_mv_refresh.restart.${self:provider.stage}.dmsTaskName}"}'
# EventBridge Rules for Check function
dmsCaseflowCheck:
Type: AWS:: Events: :Rule
Properties:
Description: 'Check status of DMS task from Caseflow DB to Caseflow Redshift' Name: dms_caseflow_check_${self:provider.stage}
ScheduleExpression: rate(30 minutes)
State: ${self:custom.dms_caseflow.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkschedule'
Input: '{"dms_task": "${self:custom.dms_caseflow.check.${self:provider.stage}.dmsTaskName}"}'
dmsOdsCheck:
Type: AWS:: Events:: Rule
Properties:
Description: 'Check status of DMS task from ETL DB to Caseflow Redshift' Name: dms_ods_check_#{self:provider.stage}
ScheduleExpression: rate(30 minutes)
State: ${self:custom.dms_ods.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn: :GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkschedule'
Input: '{"dms_task": "#{self:custom.dms_ods.check.${self:provider.stage}.dmsTaskName}"}'
dmsVacolsCheck:
Type: AWS: :Events:: Rule
Properties:
Description: 'Check status of DMS task from Vacols DB to Caseflow Redshift' Name: dms_vacols_check_${self:provider.stage}
ScheduleExpression: rate(30 minutes)
state: ${self:custom.dms_vacols.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn: :GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkSchedule'
Input: '{"dms_task": "${self:custom.dms_vacols.check.${self:provider.stage}.dmsTaskName}"}'
dmsRefreshVacolsCheck:
Type: AWS:: Events:: Rule
Properties:
Description: 'Check status of DMS task from Vacols PROD DB to Vacols ProdTest DB'
Name: dms_refresh_vacols_check_${self:provider.stage}
ScheduleExpression: rate(30 minutes)
State: ${self:custom.dms_refresh_vacols.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn: :GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkSchedule'
Input: '("ams_task": "${self:custom.dms_refresh_vacols.check.${self:provider.stage}.dmsTaskName]"}'
dmsOnPremVacolsCheck:
Type: AWS:: Events:: Rule
Properties:
Description: 'Check status of DMS task from Vacols Prod DB to Vacols On Prem DB'
Name: dms_onprem_vacols_check_${self:provider.stage}
ScheduleExpression: rate(30 minutes)
State: #{self:custom.dms_onprem_vacols.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkSchedule'
Input: '{"dms_task": "${self:custom.dms_onprem_vacols.check.${self:provider.stage}.dmsTaskName}"}'
dmsDataPlatformVacolsCheck:
Type: AWS:: Events:: Rule
Properties:
Description: 'Check status of DMS task from Vacols Prod DB to ADP Redshift' Name: dms_data_platform_vacols_check_${self:provider.stage}
ScheduleExpression: rate(30 minutes)
State: #{self: custom.dms_data_platform_vacols.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn: :GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkSchedule'
Input: '{"dms_task": "${self:custom.dms_data_platform_vacols.check.${self:provider.stage}.dmsTaskName}"}'
dmsDataPlatformCasedflowCheck:
Type: AWS:: Events:: Rule
Properties:
Description: 'Check status of DMS task from Caseflow Prod DB to ADP Redshift' Name: dms_data_platform_caseflow_check_${self:provider.stage}
ScheduleExpression: rate(30 minutes)
State: #{self:custom.dms_data_platform_caseflow.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkSchedule'
Input: '{"dms_task": "${self:custom.dms_data_platform_caseflow.check.${self:provider.stage}.dmsTaskName}"}'
dmsDevProdVacolsCheck:
Type: AWS:: Events:: Rule
Properties:
Description: 'Check status of DMS task from Vacols Prod DB to ADP Devprod Redshift'
Name: dms_devprod_vacols_check_${self:provider.stage}
ScheduleExpression: rate(30 minutes)
State: #{self:custom.dms_devprod_vacols.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn:: GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkSchedule'
Input: '{"dms_task": "${self:custom.dms_devprod_vacols.check.${self:provider.stage}.dmsTaskName}"}'
dmsDevProdCaseflowCheck:
Type: AWS:: Events:: Rule
Properties:
Description: 'Check status of DMS task from Caseflow Prod DB to ADP Devprod Redshift' Name: dms_devprod_caseflow_check_#{self:provider.stage}
ScheduleExpression: rate(30 minutes)
state: #{self:custom.dms_devprod_caseflow.check.${self:provider.stage}.state}
Targets:
- Arn:
Fn: :GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkSchedule'
Input: '{"dms_task": "${self:custom.dms_devprod_caseflow.check.${self:provider.stage}.dmsTaskName}"}'
dmsMVRefreshCheck:
Type: AWS:: Events:: Rule
Properties:
Description: 'Check status of DMS task from Caseflow Prod DB to Redshift to refresh Materialized View'
Name: dms_mv_refresh_check_${self:provider.stage}
ScheduleExpression: rate (30 minutes)
State: ${self:custom.dms_mv_refresh.check.${self:provider.stage}.state}
Targets:
- Arn :
Fn: :GetAtt: [CheckLambdaFunction, Arn]
Id: 'checkSchedule'
Input: '{"dms_task": "#{self:custom.dms_mv_refresh.check.${self:provider.stage}.dmsTaskName}"}'
plugins:
- ﻿﻿serverless-python-requirements
- ﻿﻿serverless-tag-cloud-watch-logs
